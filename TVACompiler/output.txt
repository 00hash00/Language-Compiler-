Line no: 1 #I'm here
Line no: 2 #/ 1
Line no: 3 2
Line no: 4 3/#
Line no: 5 class A {
TOKEN # 1 ( CP | class | VP | class | Line # 5)
TOKEN # 2 ( CP | Identifier | VP | A | Line # 5)
TOKEN # 3 ( CP | { | VP | { | Line # 5)
Line no: 6 int t;
TOKEN # 1 ( CP | DataType | VP | int | Line # 6)
TOKEN # 2 ( CP | Identifier | VP | t | Line # 6)
TOKEN # 3 ( CP | ; | VP | ; | Line # 6)
Line no: 7 float a=nn;
TOKEN # 1 ( CP | DataType | VP | float | Line # 7)
TOKEN # 2 ( CP | Identifier | VP | a | Line # 7)
TOKEN # 3 ( CP | = | VP | = | Line # 7)
TOKEN # 4 ( CP | Identifier | VP | nn | Line # 7)
TOKEN # 5 ( CP | ; | VP | ; | Line # 7)
Line no: 8 float a=1.2;
TOKEN # 1 ( CP | DataType | VP | float | Line # 8)
TOKEN # 2 ( CP | Identifier | VP | a | Line # 8)
TOKEN # 3 ( CP | = | VP | = | Line # 8)
TOKEN # 4 ( CP | Float/Double Constant | VP | 1.2 | Line # 8)
TOKEN # 5 ( CP | ; | VP | ; | Line # 8)
Line no: 9 public static void def AB(int c){
TOKEN # 1 ( CP | Access Modifier | VP | public | Line # 9)
TOKEN # 2 ( CP | static | VP | static | Line # 9)
TOKEN # 3 ( CP | void | VP | void | Line # 9)
TOKEN # 4 ( CP | def | VP | def | Line # 9)
TOKEN # 5 ( CP | Identifier | VP | AB | Line # 9)
TOKEN # 6 ( CP | ( | VP | ( | Line # 9)
TOKEN # 7 ( CP | DataType | VP | int | Line # 9)
TOKEN # 8 ( CP | Identifier | VP | c | Line # 9)
TOKEN # 9 ( CP | ) | VP | ) | Line # 9)
TOKEN # 10 ( CP | { | VP | { | Line # 9)
Line no: 10 print("something");
TOKEN # 1 ( CP | print | VP | print | Line # 10)
TOKEN # 2 ( CP | ( | VP | ( | Line # 10)
TOKEN # 3 ( CP | String Constant | VP | something | Line # 10)
TOKEN # 4 ( CP | ) | VP | ) | Line # 10)
TOKEN # 5 ( CP | ; | VP | ; | Line # 10)
Line no: 11 t=p;
TOKEN # 1 ( CP | Identifier | VP | t | Line # 11)
TOKEN # 2 ( CP | = | VP | = | Line # 11)
TOKEN # 3 ( CP | Identifier | VP | p | Line # 11)
TOKEN # 4 ( CP | ; | VP | ; | Line # 11)
Line no: 12 }
TOKEN # 1 ( CP | } | VP | } | Line # 12)
Line no: 13 this.defcall HUMZA();
TOKEN # 1 ( CP | this | VP | this | Line # 13)
TOKEN # 2 ( CP | . | VP | . | Line # 13)
TOKEN # 3 ( CP | defcall | VP | defcall | Line # 13)
TOKEN # 4 ( CP | Identifier | VP | HUMZA | Line # 13)
TOKEN # 5 ( CP | ( | VP | ( | Line # 13)
TOKEN # 6 ( CP | ) | VP | ) | Line # 13)
TOKEN # 7 ( CP | ; | VP | ; | Line # 13)
Line no: 14 A p = new A();
TOKEN # 1 ( CP | Identifier | VP | A | Line # 14)
TOKEN # 2 ( CP | Identifier | VP | p | Line # 14)
TOKEN # 3 ( CP | = | VP | = | Line # 14)
TOKEN # 4 ( CP | new | VP | new | Line # 14)
TOKEN # 5 ( CP | Identifier | VP | A | Line # 14)
TOKEN # 6 ( CP | ( | VP | ( | Line # 14)
TOKEN # 7 ( CP | ) | VP | ) | Line # 14)
TOKEN # 8 ( CP | ; | VP | ; | Line # 14)
Line no: 15 PSVM(String[] args) {
TOKEN # 1 ( CP | PSVM | VP | PSVM | Line # 15)
TOKEN # 2 ( CP | ( | VP | ( | Line # 15)
TOKEN # 3 ( CP | DataType | VP | String | Line # 15)
TOKEN # 4 ( CP | [ | VP | [ | Line # 15)
TOKEN # 5 ( CP | ] | VP | ] | Line # 15)
TOKEN # 6 ( CP | args | VP | args | Line # 15)
TOKEN # 7 ( CP | ) | VP | ) | Line # 15)
TOKEN # 8 ( CP | { | VP | { | Line # 15)
Line no: 16 float b=3.1;
TOKEN # 1 ( CP | DataType | VP | float | Line # 16)
TOKEN # 2 ( CP | Identifier | VP | b | Line # 16)
TOKEN # 3 ( CP | = | VP | = | Line # 16)
TOKEN # 4 ( CP | Float/Double Constant | VP | 3.1 | Line # 16)
TOKEN # 5 ( CP | ; | VP | ; | Line # 16)
Line no: 17 float c=4.5e-6;
TOKEN # 1 ( CP | DataType | VP | float | Line # 17)
TOKEN # 2 ( CP | Identifier | VP | c | Line # 17)
TOKEN # 3 ( CP | = | VP | = | Line # 17)
TOKEN # 4 ( CP | Float/Double Constant | VP | 4.5e-6 | Line # 17)
TOKEN # 5 ( CP | ; | VP | ; | Line # 17)
Line no: 18 float d=7.8e+9;
TOKEN # 1 ( CP | DataType | VP | float | Line # 18)
TOKEN # 2 ( CP | Identifier | VP | d | Line # 18)
TOKEN # 3 ( CP | = | VP | = | Line # 18)
TOKEN # 4 ( CP | Float/Double Constant | VP | 7.8e+9 | Line # 18)
TOKEN # 5 ( CP | ; | VP | ; | Line # 18)
Line no: 19 if(a<=b){print("something");}
TOKEN # 1 ( CP | if | VP | if | Line # 19)
TOKEN # 2 ( CP | ( | VP | ( | Line # 19)
TOKEN # 3 ( CP | Identifier | VP | a | Line # 19)
TOKEN # 4 ( CP | Relational Operator | VP | <= | Line # 19)
TOKEN # 5 ( CP | Identifier | VP | b | Line # 19)
TOKEN # 6 ( CP | ) | VP | ) | Line # 19)
TOKEN # 7 ( CP | { | VP | { | Line # 19)
TOKEN # 8 ( CP | print | VP | print | Line # 19)
TOKEN # 9 ( CP | ( | VP | ( | Line # 19)
TOKEN # 10 ( CP | String Constant | VP | something | Line # 19)
TOKEN # 11 ( CP | ) | VP | ) | Line # 19)
TOKEN # 12 ( CP | ; | VP | ; | Line # 19)
TOKEN # 13 ( CP | } | VP | } | Line # 19)
Line no: 20 else{
TOKEN # 1 ( CP | else | VP | else | Line # 20)
TOKEN # 2 ( CP | { | VP | { | Line # 20)
Line no: 21 print("I'm here");
TOKEN # 1 ( CP | print | VP | print | Line # 21)
TOKEN # 2 ( CP | ( | VP | ( | Line # 21)
TOKEN # 3 ( CP | String Constant | VP | I'm here | Line # 21)
TOKEN # 4 ( CP | ) | VP | ) | Line # 21)
TOKEN # 5 ( CP | ; | VP | ; | Line # 21)
Line no: 22 }
TOKEN # 1 ( CP | } | VP | } | Line # 22)
Line no: 23 switch(a){
TOKEN # 1 ( CP | switch | VP | switch | Line # 23)
TOKEN # 2 ( CP | ( | VP | ( | Line # 23)
TOKEN # 3 ( CP | Identifier | VP | a | Line # 23)
TOKEN # 4 ( CP | ) | VP | ) | Line # 23)
TOKEN # 5 ( CP | { | VP | { | Line # 23)
Line no: 24 case 1:
TOKEN # 1 ( CP | case | VP | case | Line # 24)
TOKEN # 2 ( CP | Integer Constant | VP | 1 | Line # 24)
TOKEN # 3 ( CP | : | VP | : | Line # 24)
Line no: 25 break;
TOKEN # 1 ( CP | Break-Continue | VP | break | Line # 25)
TOKEN # 2 ( CP | ; | VP | ; | Line # 25)
Line no: 26 case 2:
TOKEN # 1 ( CP | case | VP | case | Line # 26)
TOKEN # 2 ( CP | Integer Constant | VP | 2 | Line # 26)
TOKEN # 3 ( CP | : | VP | : | Line # 26)
Line no: 27 continue;
TOKEN # 1 ( CP | Break-Continue | VP | continue | Line # 27)
TOKEN # 2 ( CP | ; | VP | ; | Line # 27)
Line no: 28 }
TOKEN # 1 ( CP | } | VP | } | Line # 28)
Line no: 29 for(int i=0;i<=5;i--){
TOKEN # 1 ( CP | for | VP | for | Line # 29)
TOKEN # 2 ( CP | ( | VP | ( | Line # 29)
TOKEN # 3 ( CP | DataType | VP | int | Line # 29)
TOKEN # 4 ( CP | Identifier | VP | i | Line # 29)
TOKEN # 5 ( CP | = | VP | = | Line # 29)
TOKEN # 6 ( CP | Integer Constant | VP | 0 | Line # 29)
TOKEN # 7 ( CP | ; | VP | ; | Line # 29)
TOKEN # 8 ( CP | Identifier | VP | i | Line # 29)
TOKEN # 9 ( CP | Relational Operator | VP | <= | Line # 29)
TOKEN # 10 ( CP | Integer Constant | VP | 5 | Line # 29)
TOKEN # 11 ( CP | ; | VP | ; | Line # 29)
TOKEN # 12 ( CP | Identifier | VP | i | Line # 29)
TOKEN # 13 ( CP | Decrement Operator | VP | -- | Line # 29)
TOKEN # 14 ( CP | ) | VP | ) | Line # 29)
TOKEN # 15 ( CP | { | VP | { | Line # 29)
Line no: 30 int a=b;
TOKEN # 1 ( CP | DataType | VP | int | Line # 30)
TOKEN # 2 ( CP | Identifier | VP | a | Line # 30)
TOKEN # 3 ( CP | = | VP | = | Line # 30)
TOKEN # 4 ( CP | Identifier | VP | b | Line # 30)
TOKEN # 5 ( CP | ; | VP | ; | Line # 30)
Line no: 31 }
TOKEN # 1 ( CP | } | VP | } | Line # 31)
Line no: 32 Array int[][] abc = {{3},{5}};
TOKEN # 1 ( CP | Array | VP | Array | Line # 32)
TOKEN # 2 ( CP | DataType | VP | int | Line # 32)
TOKEN # 3 ( CP | [ | VP | [ | Line # 32)
TOKEN # 4 ( CP | ] | VP | ] | Line # 32)
TOKEN # 5 ( CP | [ | VP | [ | Line # 32)
TOKEN # 6 ( CP | ] | VP | ] | Line # 32)
TOKEN # 7 ( CP | Identifier | VP | abc | Line # 32)
TOKEN # 8 ( CP | = | VP | = | Line # 32)
TOKEN # 9 ( CP | { | VP | { | Line # 32)
TOKEN # 10 ( CP | { | VP | { | Line # 32)
TOKEN # 11 ( CP | Integer Constant | VP | 3 | Line # 32)
TOKEN # 12 ( CP | } | VP | } | Line # 32)
TOKEN # 13 ( CP | , | VP | , | Line # 32)
TOKEN # 14 ( CP | { | VP | { | Line # 32)
TOKEN # 15 ( CP | Integer Constant | VP | 5 | Line # 32)
TOKEN # 16 ( CP | } | VP | } | Line # 32)
TOKEN # 17 ( CP | } | VP | } | Line # 32)
TOKEN # 18 ( CP | ; | VP | ; | Line # 32)
Line no: 33 Arraylist<int> abc = new Arraylist<>();
TOKEN # 1 ( CP | Arraylist | VP | Arraylist | Line # 33)
TOKEN # 2 ( CP | Relational Operator | VP | < | Line # 33)
TOKEN # 3 ( CP | DataType | VP | int | Line # 33)
TOKEN # 4 ( CP | Relational Operator | VP | > | Line # 33)
TOKEN # 5 ( CP | Identifier | VP | abc | Line # 33)
TOKEN # 6 ( CP | = | VP | = | Line # 33)
TOKEN # 7 ( CP | new | VP | new | Line # 33)
TOKEN # 8 ( CP | Arraylist | VP | Arraylist | Line # 33)
TOKEN # 9 ( CP | Relational Operator | VP | < | Line # 33)
TOKEN # 10 ( CP | Relational Operator | VP | > | Line # 33)
TOKEN # 11 ( CP | ( | VP | ( | Line # 33)
TOKEN # 12 ( CP | ) | VP | ) | Line # 33)
TOKEN # 13 ( CP | ; | VP | ; | Line # 33)
Line no: 34 defcall A (a);
TOKEN # 1 ( CP | defcall | VP | defcall | Line # 34)
TOKEN # 2 ( CP | Identifier | VP | A | Line # 34)
TOKEN # 3 ( CP | ( | VP | ( | Line # 34)
TOKEN # 4 ( CP | Identifier | VP | a | Line # 34)
TOKEN # 5 ( CP | ) | VP | ) | Line # 34)
TOKEN # 6 ( CP | ; | VP | ; | Line # 34)
Line no: 35 #a.defcall A();
Line no: 36 this.HUMZA=BOOMER;
TOKEN # 1 ( CP | this | VP | this | Line # 36)
TOKEN # 2 ( CP | . | VP | . | Line # 36)
TOKEN # 3 ( CP | Identifier | VP | HUMZA | Line # 36)
TOKEN # 4 ( CP | = | VP | = | Line # 36)
TOKEN # 5 ( CP | Identifier | VP | BOOMER | Line # 36)
TOKEN # 6 ( CP | ; | VP | ; | Line # 36)
Line no: 37 public int def AA(int c, String v){
TOKEN # 1 ( CP | Access Modifier | VP | public | Line # 37)
TOKEN # 2 ( CP | DataType | VP | int | Line # 37)
TOKEN # 3 ( CP | def | VP | def | Line # 37)
TOKEN # 4 ( CP | Identifier | VP | AA | Line # 37)
TOKEN # 5 ( CP | ( | VP | ( | Line # 37)
TOKEN # 6 ( CP | DataType | VP | int | Line # 37)
TOKEN # 7 ( CP | Identifier | VP | c | Line # 37)
TOKEN # 8 ( CP | , | VP | , | Line # 37)
TOKEN # 9 ( CP | DataType | VP | String | Line # 37)
TOKEN # 10 ( CP | Identifier | VP | v | Line # 37)
TOKEN # 11 ( CP | ) | VP | ) | Line # 37)
TOKEN # 12 ( CP | { | VP | { | Line # 37)
Line no: 38 int z = c;
TOKEN # 1 ( CP | DataType | VP | int | Line # 38)
TOKEN # 2 ( CP | Identifier | VP | z | Line # 38)
TOKEN # 3 ( CP | = | VP | = | Line # 38)
TOKEN # 4 ( CP | Identifier | VP | c | Line # 38)
TOKEN # 5 ( CP | ; | VP | ; | Line # 38)
Line no: 39 return 123;
TOKEN # 1 ( CP | return | VP | return | Line # 39)
TOKEN # 2 ( CP | Integer Constant | VP | 123 | Line # 39)
TOKEN # 3 ( CP | ; | VP | ; | Line # 39)
Line no: 40 }
TOKEN # 1 ( CP | } | VP | } | Line # 40)
Line no: 41 }
TOKEN # 1 ( CP | } | VP | } | Line # 41)
Line no: 42 }
TOKEN # 1 ( CP | } | VP | } | Line # 42)
Line no: 43 
Line no: 44 abstract class J extend A{
TOKEN # 1 ( CP | abstract | VP | abstract | Line # 44)
TOKEN # 2 ( CP | class | VP | class | Line # 44)
TOKEN # 3 ( CP | Identifier | VP | J | Line # 44)
TOKEN # 4 ( CP | extend | VP | extend | Line # 44)
TOKEN # 5 ( CP | Identifier | VP | A | Line # 44)
TOKEN # 6 ( CP | { | VP | { | Line # 44)
Line no: 45 private abstract int def ABC (#/int a, float b, String c/#);
TOKEN # 1 ( CP | Access Modifier | VP | private | Line # 45)
TOKEN # 2 ( CP | abstract | VP | abstract | Line # 45)
TOKEN # 3 ( CP | DataType | VP | int | Line # 45)
TOKEN # 4 ( CP | def | VP | def | Line # 45)
TOKEN # 5 ( CP | Identifier | VP | ABC | Line # 45)
TOKEN # 6 ( CP | ( | VP | ( | Line # 45)
TOKEN # 7 ( CP | ) | VP | ) | Line # 45)
TOKEN # 8 ( CP | ; | VP | ; | Line # 45)
Line no: 46 defcall A (a);
TOKEN # 1 ( CP | defcall | VP | defcall | Line # 46)
TOKEN # 2 ( CP | Identifier | VP | A | Line # 46)
TOKEN # 3 ( CP | ( | VP | ( | Line # 46)
TOKEN # 4 ( CP | Identifier | VP | a | Line # 46)
TOKEN # 5 ( CP | ) | VP | ) | Line # 46)
TOKEN # 6 ( CP | ; | VP | ; | Line # 46)
Line no: 47 #public int def ABC(int v);
Line no: 48 }
TOKEN # 1 ( CP | } | VP | } | Line # 48)
Line no: 49 
Line no: 50 
Line no: 51 
Line no: 52 interface X {
TOKEN # 1 ( CP | interface | VP | interface | Line # 52)
TOKEN # 2 ( CP | Identifier | VP | X | Line # 52)
TOKEN # 3 ( CP | { | VP | { | Line # 52)
Line no: 53 private abstract int def ABC (int a, float b, String c);
TOKEN # 1 ( CP | Access Modifier | VP | private | Line # 53)
TOKEN # 2 ( CP | abstract | VP | abstract | Line # 53)
TOKEN # 3 ( CP | DataType | VP | int | Line # 53)
TOKEN # 4 ( CP | def | VP | def | Line # 53)
TOKEN # 5 ( CP | Identifier | VP | ABC | Line # 53)
TOKEN # 6 ( CP | ( | VP | ( | Line # 53)
TOKEN # 7 ( CP | DataType | VP | int | Line # 53)
TOKEN # 8 ( CP | Identifier | VP | a | Line # 53)
TOKEN # 9 ( CP | , | VP | , | Line # 53)
TOKEN # 10 ( CP | DataType | VP | float | Line # 53)
TOKEN # 11 ( CP | Identifier | VP | b | Line # 53)
TOKEN # 12 ( CP | , | VP | , | Line # 53)
TOKEN # 13 ( CP | DataType | VP | String | Line # 53)
TOKEN # 14 ( CP | Identifier | VP | c | Line # 53)
TOKEN # 15 ( CP | ) | VP | ) | Line # 53)
TOKEN # 16 ( CP | ; | VP | ; | Line # 53)
Line no: 54 #{
Line no: 55 #int a =b;
Line no: 56 #return a;}
Line no: 57 
Line no: 58 #override
Line no: 59 #public static void def(int c);
Line no: 60 #virtual
Line no: 61 
Line no: 62 Arraylist<int> abc = new Arraylist<>();
TOKEN # 1 ( CP | Arraylist | VP | Arraylist | Line # 62)
TOKEN # 2 ( CP | Relational Operator | VP | < | Line # 62)
TOKEN # 3 ( CP | DataType | VP | int | Line # 62)
TOKEN # 4 ( CP | Relational Operator | VP | > | Line # 62)
TOKEN # 5 ( CP | Identifier | VP | abc | Line # 62)
TOKEN # 6 ( CP | = | VP | = | Line # 62)
TOKEN # 7 ( CP | new | VP | new | Line # 62)
TOKEN # 8 ( CP | Arraylist | VP | Arraylist | Line # 62)
TOKEN # 9 ( CP | Relational Operator | VP | < | Line # 62)
TOKEN # 10 ( CP | Relational Operator | VP | > | Line # 62)
TOKEN # 11 ( CP | ( | VP | ( | Line # 62)
TOKEN # 12 ( CP | ) | VP | ) | Line # 62)
TOKEN # 13 ( CP | ; | VP | ; | Line # 62)
Line no: 63 Array int [][] xyz;
TOKEN # 1 ( CP | Array | VP | Array | Line # 63)
TOKEN # 2 ( CP | DataType | VP | int | Line # 63)
TOKEN # 3 ( CP | [ | VP | [ | Line # 63)
TOKEN # 4 ( CP | ] | VP | ] | Line # 63)
TOKEN # 5 ( CP | [ | VP | [ | Line # 63)
TOKEN # 6 ( CP | ] | VP | ] | Line # 63)
TOKEN # 7 ( CP | Identifier | VP | xyz | Line # 63)
TOKEN # 8 ( CP | ; | VP | ; | Line # 63)
Line no: 64 Array int [][] xyz = {{1,2,3},{4,5,6}};
TOKEN # 1 ( CP | Array | VP | Array | Line # 64)
TOKEN # 2 ( CP | DataType | VP | int | Line # 64)
TOKEN # 3 ( CP | [ | VP | [ | Line # 64)
TOKEN # 4 ( CP | ] | VP | ] | Line # 64)
TOKEN # 5 ( CP | [ | VP | [ | Line # 64)
TOKEN # 6 ( CP | ] | VP | ] | Line # 64)
TOKEN # 7 ( CP | Identifier | VP | xyz | Line # 64)
TOKEN # 8 ( CP | = | VP | = | Line # 64)
TOKEN # 9 ( CP | { | VP | { | Line # 64)
TOKEN # 10 ( CP | { | VP | { | Line # 64)
TOKEN # 11 ( CP | Integer Constant | VP | 1 | Line # 64)
TOKEN # 12 ( CP | , | VP | , | Line # 64)
TOKEN # 13 ( CP | Integer Constant | VP | 2 | Line # 64)
TOKEN # 14 ( CP | , | VP | , | Line # 64)
TOKEN # 15 ( CP | Integer Constant | VP | 3 | Line # 64)
TOKEN # 16 ( CP | } | VP | } | Line # 64)
TOKEN # 17 ( CP | , | VP | , | Line # 64)
TOKEN # 18 ( CP | { | VP | { | Line # 64)
TOKEN # 19 ( CP | Integer Constant | VP | 4 | Line # 64)
TOKEN # 20 ( CP | , | VP | , | Line # 64)
TOKEN # 21 ( CP | Integer Constant | VP | 5 | Line # 64)
TOKEN # 22 ( CP | , | VP | , | Line # 64)
TOKEN # 23 ( CP | Integer Constant | VP | 6 | Line # 64)
TOKEN # 24 ( CP | } | VP | } | Line # 64)
TOKEN # 25 ( CP | } | VP | } | Line # 64)
TOKEN # 26 ( CP | ; | VP | ; | Line # 64)
Line no: 65 
Line no: 66 }
TOKEN # 1 ( CP | } | VP | } | Line # 66)
Line no: 67 interface K extend X{}
TOKEN # 1 ( CP | interface | VP | interface | Line # 67)
TOKEN # 2 ( CP | Identifier | VP | K | Line # 67)
TOKEN # 3 ( CP | extend | VP | extend | Line # 67)
TOKEN # 4 ( CP | Identifier | VP | X | Line # 67)
TOKEN # 5 ( CP | { | VP | { | Line # 67)
TOKEN # 6 ( CP | } | VP | } | Line # 67)
Line no: 68 
Line no: 69 interface Y extend K,X{
TOKEN # 1 ( CP | interface | VP | interface | Line # 69)
TOKEN # 2 ( CP | Identifier | VP | Y | Line # 69)
TOKEN # 3 ( CP | extend | VP | extend | Line # 69)
TOKEN # 4 ( CP | Identifier | VP | K | Line # 69)
TOKEN # 5 ( CP | , | VP | , | Line # 69)
TOKEN # 6 ( CP | Identifier | VP | X | Line # 69)
TOKEN # 7 ( CP | { | VP | { | Line # 69)
Line no: 70 #public int def ABC(int v);
Line no: 71 private abstract int def ABC (int a, float b, String c);
TOKEN # 1 ( CP | Access Modifier | VP | private | Line # 71)
TOKEN # 2 ( CP | abstract | VP | abstract | Line # 71)
TOKEN # 3 ( CP | DataType | VP | int | Line # 71)
TOKEN # 4 ( CP | def | VP | def | Line # 71)
TOKEN # 5 ( CP | Identifier | VP | ABC | Line # 71)
TOKEN # 6 ( CP | ( | VP | ( | Line # 71)
TOKEN # 7 ( CP | DataType | VP | int | Line # 71)
TOKEN # 8 ( CP | Identifier | VP | a | Line # 71)
TOKEN # 9 ( CP | , | VP | , | Line # 71)
TOKEN # 10 ( CP | DataType | VP | float | Line # 71)
TOKEN # 11 ( CP | Identifier | VP | b | Line # 71)
TOKEN # 12 ( CP | , | VP | , | Line # 71)
TOKEN # 13 ( CP | DataType | VP | String | Line # 71)
TOKEN # 14 ( CP | Identifier | VP | c | Line # 71)
TOKEN # 15 ( CP | ) | VP | ) | Line # 71)
TOKEN # 16 ( CP | ; | VP | ; | Line # 71)
Line no: 72 #{
Line no: 73 #int a =b;
Line no: 74 #return a;}
Line no: 75 
Line no: 76 Arraylist<int> abc = new Arraylist<>();
TOKEN # 1 ( CP | Arraylist | VP | Arraylist | Line # 76)
TOKEN # 2 ( CP | Relational Operator | VP | < | Line # 76)
TOKEN # 3 ( CP | DataType | VP | int | Line # 76)
TOKEN # 4 ( CP | Relational Operator | VP | > | Line # 76)
TOKEN # 5 ( CP | Identifier | VP | abc | Line # 76)
TOKEN # 6 ( CP | = | VP | = | Line # 76)
TOKEN # 7 ( CP | new | VP | new | Line # 76)
TOKEN # 8 ( CP | Arraylist | VP | Arraylist | Line # 76)
TOKEN # 9 ( CP | Relational Operator | VP | < | Line # 76)
TOKEN # 10 ( CP | Relational Operator | VP | > | Line # 76)
TOKEN # 11 ( CP | ( | VP | ( | Line # 76)
TOKEN # 12 ( CP | ) | VP | ) | Line # 76)
TOKEN # 13 ( CP | ; | VP | ; | Line # 76)
Line no: 77 Array int [][] xyz;
TOKEN # 1 ( CP | Array | VP | Array | Line # 77)
TOKEN # 2 ( CP | DataType | VP | int | Line # 77)
TOKEN # 3 ( CP | [ | VP | [ | Line # 77)
TOKEN # 4 ( CP | ] | VP | ] | Line # 77)
TOKEN # 5 ( CP | [ | VP | [ | Line # 77)
TOKEN # 6 ( CP | ] | VP | ] | Line # 77)
TOKEN # 7 ( CP | Identifier | VP | xyz | Line # 77)
TOKEN # 8 ( CP | ; | VP | ; | Line # 77)
Line no: 78 Array int [][] xyz = {{1,2,3},{4,5,6}};
TOKEN # 1 ( CP | Array | VP | Array | Line # 78)
TOKEN # 2 ( CP | DataType | VP | int | Line # 78)
TOKEN # 3 ( CP | [ | VP | [ | Line # 78)
TOKEN # 4 ( CP | ] | VP | ] | Line # 78)
TOKEN # 5 ( CP | [ | VP | [ | Line # 78)
TOKEN # 6 ( CP | ] | VP | ] | Line # 78)
TOKEN # 7 ( CP | Identifier | VP | xyz | Line # 78)
TOKEN # 8 ( CP | = | VP | = | Line # 78)
TOKEN # 9 ( CP | { | VP | { | Line # 78)
TOKEN # 10 ( CP | { | VP | { | Line # 78)
TOKEN # 11 ( CP | Integer Constant | VP | 1 | Line # 78)
TOKEN # 12 ( CP | , | VP | , | Line # 78)
TOKEN # 13 ( CP | Integer Constant | VP | 2 | Line # 78)
TOKEN # 14 ( CP | , | VP | , | Line # 78)
TOKEN # 15 ( CP | Integer Constant | VP | 3 | Line # 78)
TOKEN # 16 ( CP | } | VP | } | Line # 78)
TOKEN # 17 ( CP | , | VP | , | Line # 78)
TOKEN # 18 ( CP | { | VP | { | Line # 78)
TOKEN # 19 ( CP | Integer Constant | VP | 4 | Line # 78)
TOKEN # 20 ( CP | , | VP | , | Line # 78)
TOKEN # 21 ( CP | Integer Constant | VP | 5 | Line # 78)
TOKEN # 22 ( CP | , | VP | , | Line # 78)
TOKEN # 23 ( CP | Integer Constant | VP | 6 | Line # 78)
TOKEN # 24 ( CP | } | VP | } | Line # 78)
TOKEN # 25 ( CP | } | VP | } | Line # 78)
TOKEN # 26 ( CP | ; | VP | ; | Line # 78)
Line no: 79 }
TOKEN # 1 ( CP | } | VP | } | Line # 79)
Line no: 80 class P implements K,Y{}
TOKEN # 1 ( CP | class | VP | class | Line # 80)
TOKEN # 2 ( CP | Identifier | VP | P | Line # 80)
TOKEN # 3 ( CP | implements | VP | implements | Line # 80)
TOKEN # 4 ( CP | Identifier | VP | K | Line # 80)
TOKEN # 5 ( CP | , | VP | , | Line # 80)
TOKEN # 6 ( CP | Identifier | VP | Y | Line # 80)
TOKEN # 7 ( CP | { | VP | { | Line # 80)
TOKEN # 8 ( CP | } | VP | } | Line # 80)
